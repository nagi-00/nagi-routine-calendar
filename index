<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calendar Dashboard</title>

    <!-- React & Babel CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.development.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.development.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js"></script>

    <!-- Firebase (compat) -->
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background-color: #f3f4f6;
            min-height: 100vh;
        }

        .app-container {
            display: flex;
            min-height: 100vh;
            position: relative;
        }

        .sidebar {
            width: 300px;
            background: white;
            height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            transition: transform 0.3s ease;
            z-index: 10;
            padding: 20px;
            border-right: 1px solid #e5e7eb;
        }

        .sidebar.collapsed {
            transform: translateX(-300px);
        }

        .main-content {
            flex: 1;
            padding: 20px;
            margin-left: 300px;
            transition: margin-left 0.3s ease;
        }

        .main-content.expanded {
            margin-left: 0;
        }

        .toggle-button {
            position: fixed;
            left: 300px;
            top: 20px;
            z-index: 20;
            background: white;
            border: 1px solid #e5e7eb;
            border-left: none;
            padding: 8px 12px;
            cursor: pointer;
            transition: left 0.3s ease;
            border-radius: 0 4px 4px 0;
        }

        .toggle-button.collapsed {
            left: 0;
        }

        .calendar-container {
            background: white;
            border-radius: 8px;
            padding: 20px;
            max-width: 400px;
            margin: 0 auto;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 32px);
            gap: 4px;
            justify-content: center;
        }

        .calendar-day {
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            border: none;
            background: none;
            cursor: pointer;
        }

        .month-navigator {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .nav-button {
            background: none;
            border: none;
            padding: 4px 8px;
            cursor: pointer;
            color: #6B7280;
            font-size: 18px;
        }

        .calendar-list {
            margin-bottom: 20px;
        }

        .calendar-item {
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 4px;
        }

        .calendar-item:hover {
            background-color: #f3f4f6;
        }

        .calendar-item.selected {
            background-color: #f3f4f6;
        }

        .new-calendar-form {
            margin-top: 20px;
        }

        .input-text {
            width: 100%;
            padding: 8px;
            border: 1px solid #e5e7eb;
            border-radius: 4px;
            margin-bottom: 8px;
        }

        .color-picker-container {
            display: flex;
            gap: 8px;
        }

        .color-picker {
            width: 32px;
            height: 32px;
        }

        .add-button {
            flex-grow: 1;
            padding: 8px;
            background-color: #f3f4f6;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .calendar-subtitle {
            font-size: 14px;
            color: #6B7280;
            text-align: center;
            margin-bottom: 16px;
        }

        .month-title {
            font-size: 18px;
            font-weight: 500;
            color: #111827;
        }
    </style>
</head>
<body>
<div id="root"></div>

<script type="text/babel">
/***********************************************************
 * (1) Firebase 설정 & 초기화
 ***********************************************************/
const firebaseConfig = {
    apiKey: "AIzaSyC7-uDX9U7jwXywrJTq2N29wv3bxmFSTlk",
    authDomain: "nagi-routine.firebaseapp.com",
    projectId: "nagi-routine",
    // 필요하다면 databaseURL, storageBucket 등도 추가
};
firebase.initializeApp(firebaseConfig);

// Firestore 인스턴스
const db = firebase.firestore();

/***********************************************************
 * (2) 간단한 비밀번호 보호 컴포넌트
 ***********************************************************/
function PasswordGuard({ children }) {
  const [inputPwd, setInputPwd] = React.useState('');
  const [isAuthorized, setIsAuthorized] = React.useState(false);

  const checkPassword = () => {
    // 네가 원하는 비밀번호 = demian
    if (inputPwd === "demian") {
      setIsAuthorized(true);
    } else {
      alert("Please try again.");
    }
  };

  if (!isAuthorized) {
    // 승인 전: 비밀번호 입력창만 표시
    return (
      <div style={{ margin: "20px" }}>
        <h3>. . . </h3>
        <input
          type="password"
          value={inputPwd}
          onChange={(e) => setInputPwd(e.target.value)}
        />
        <button onClick={checkPassword}>확인</button>
      </div>
    );
  }

  // 승인 후: 원래 내용을 보여준다
  return children;
}

/***********************************************************
 * (3) 달력 App: Firestore와 CRUD 연동
 ***********************************************************/
function App() {
  // 사이드바 열림/닫힘, 현재 날짜, 선택 캘린더
  const [isSidebarCollapsed, setIsSidebarCollapsed] = React.useState(false);
  const [currentDate, setCurrentDate] = React.useState(new Date());
  const [calendars, setCalendars] = React.useState([]);
  const [selectedCalendar, setSelectedCalendar] = React.useState(null);

  // 새 캘린더 추가용 상태
  const [newTitle, setNewTitle] = React.useState('');
  const [newColor, setNewColor] = React.useState('#9CA3AF');

  /***********************************************************
   * (3-1) 앱 첫 렌더링 시: Firestore에서 캘린더 목록 구독
   ***********************************************************/
  React.useEffect(() => {
    // onSnapshot을 쓰면 실시간으로 문서 변경이 반영됨
    const unsubscribe = db.collection('calendars').onSnapshot(
      (snapshot) => {
        const loaded = [];
        snapshot.forEach((doc) => {
          loaded.push({
            id: doc.id,   // Firestore 문서 ID
            ...doc.data() // { title, color, completedDates: [] ... }
          });
        });
        setCalendars(loaded);

        // 아직 selectedCalendar가 없으면, 첫 번째 캘린더를 기본 선택
        if (loaded.length > 0 && !selectedCalendar) {
          setSelectedCalendar(loaded[0].id);
        }
      },
      (error) => {
        console.error("Firestore 구독 중 에러:", error);
      }
    );

    // 컴포넌트가 사라질 때 구독 해제
    return () => unsubscribe();
  }, [selectedCalendar]);

  /***********************************************************
   * (3-2) 새 캘린더 추가 -> Firestore에 .add()
   ***********************************************************/
  const addCalendar = async () => {
    if (!newTitle.trim()) return;
    const newCal = {
      title: newTitle,
      color: newColor,
      completedDates: []
    };

    try {
      // 새 문서 생성
      await db.collection('calendars').add(newCal);
      // onSnapshot을 통해 calendars가 자동 갱신됨
      setNewTitle('');
      setNewColor('#9CA3AF');
    } catch (err) {
      console.error("달력 추가 중 에러:", err);
    }
  };

  /***********************************************************
   * (3-3) 날짜 토글 -> Firestore에 .update()
   ***********************************************************/
  const toggleDate = async (day) => {
    if (!selectedCalendar) return;

    // 현재 선택된 캘린더 문서를 찾는다
    const targetCal = calendars.find(cal => cal.id === selectedCalendar);
    if (!targetCal) return;

    // 기존 completedDates 배열을 복제/토글
    const dates = [...(targetCal.completedDates || [])];
    const idx = dates.indexOf(day);
    if (idx === -1) {
      dates.push(day);
    } else {
      dates.splice(idx, 1);
    }

    // Firestore 업데이트
    try {
      await db.collection('calendars')
              .doc(selectedCalendar)
              .update({ completedDates: dates });
    } catch (err) {
      console.error("날짜 토글 중 에러:", err);
    }
  };

  /***********************************************************
   * (3-4) 월 이동, 사이드바 토글 등
   ***********************************************************/
  const navigateMonth = (direction) => {
    setCurrentDate(prev => {
      const newDate = new Date(prev);
      if (direction === 'prev') {
        newDate.setMonth(newDate.getMonth() - 1);
      } else {
        newDate.setMonth(newDate.getMonth() + 1);
      }
      return newDate;
    });
  };

  const toggleSidebar = () => {
    setIsSidebarCollapsed(!isSidebarCollapsed);
  };

  /***********************************************************
   * (3-5) 현재 선택된 캘린더 가져오기
   ***********************************************************/
  // 혹은 selectedCalendar가 없으면 임시 객체
  const currentCalendar = calendars.find(cal => cal.id === selectedCalendar)
                        || { completedDates: [], color: '#9CA3AF' };

  /***********************************************************
   * (3-6) 렌더링
   ***********************************************************/
  // daysInMonth: 현재 월의 마지막 날짜
  const daysInMonth = new Date(
    currentDate.getFullYear(),
    currentDate.getMonth() + 1,
    0
  ).getDate();

  // firstDay: 현재 월 1일이 무슨 요일부터 시작하는지 (0=일요일)
  const firstDay = new Date(
    currentDate.getFullYear(),
    currentDate.getMonth(),
    1
  ).getDay();

  return (
    <div className="app-container">
      {/* 사이드바 */}
      <div className={`sidebar ${isSidebarCollapsed ? 'collapsed' : ''}`}>
        <h2 className="text-xl font-semibold mb-4">List</h2>
        <div className="calendar-list">
          {calendars.map(cal => (
            <div
              key={cal.id}
              className={`calendar-item ${selectedCalendar === cal.id ? 'selected' : ''}`}
              onClick={() => setSelectedCalendar(cal.id)}
            >
              <span>{cal.title}</span>
            </div>
          ))}
        </div>
        <div className="new-calendar-form">
          <input
            type="text"
            className="input-text"
            placeholder="Title here"
            value={newTitle}
            onChange={(e) => setNewTitle(e.target.value)}
          />
          <div className="color-picker-container">
            <input
              type="color"
              className="color-picker"
              value={newColor}
              onChange={(e) => setNewColor(e.target.value)}
            />
            <button
              className="add-button"
              onClick={addCalendar}
            >
              Add
            </button>
          </div>
        </div>
      </div>

      {/* 사이드바 토글 버튼 */}
      <button
        className={`toggle-button ${isSidebarCollapsed ? 'collapsed' : ''}`}
        onClick={toggleSidebar}
      >
        {isSidebarCollapsed ? '→' : '←'}
      </button>

      {/* 메인 컨테이너 */}
      <div className={`main-content ${isSidebarCollapsed ? 'expanded' : ''}`}>
        <div className="calendar-container">
          <div className="month-navigator">
            <button className="nav-button" onClick={() => navigateMonth('prev')}>←</button>
            <span className="month-title">
              {currentDate.toLocaleString('en-US', {
                month: 'long',
                year: 'numeric'
              })}
            </span>
            <button className="nav-button" onClick={() => navigateMonth('next')}>→</button>
          </div>
          <p className="calendar-subtitle">내면의 성장을 향한 여정</p>
          <div className="calendar-grid mb-2">
            {['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'].map(day => (
              <div key={day} className="calendar-day font-medium text-gray-600">{day}</div>
            ))}
          </div>
          <div className="calendar-grid">
            {Array(firstDay).fill(null).map((_, i) => (
              <div key={`empty-${i}`} className="calendar-day" />
            ))}
            {Array(daysInMonth).fill(null).map((_, i) => {
              const day = i + 1;
              const isCompleted = currentCalendar.completedDates.includes(day);
              return (
                <button
                  key={day}
                  className="calendar-day"
                  onClick={() => toggleDate(day)}
                  style={{
                    backgroundColor: isCompleted ? currentCalendar.color : 'transparent',
                    borderRadius: isCompleted ? '9999px' : '0',
                    color: isCompleted ? 'white' : '#4B5563'
                  }}
                >
                  {day}
                </button>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
}

/***********************************************************
 * (4) 최종 렌더링 (비밀번호 보호 + 달력)
 ***********************************************************/
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <PasswordGuard>
    <App />
  </PasswordGuard>
);
</script>
</body>
</html>